#include <Servo.h>
#include <LiquidCrystal.h>

/* /////////////////////////////////////////////////////////////////////////////// */
//CLASSES
  //CLASS PLAYER

class Player {
  private:
  String name;   //name of player
  int maxHealth, health, attack, level, xp;   //stats of player (hp, atk)
  
  public: 
  String getName() const { return name; };   //retrieve player's name(accessor)
  int getHealth() const { return health + level; }; //retrieve player's currentHealth
  int getMaxHealth() const { return maxHealth + level; }; //retrieve player's maxHealth
  int getLevel() const { return level; }; //retrieve player's level
  int getAttack() const { return attack + level; }; //retrieve player's attack
  int getXP() const { return xp; };   //retrieve player's xp
  void setMaxHealth(int maxhp) { maxHealth = maxhp; }; //set maxHealth
  void setHealth(int hp) { health = hp; };  //set health(mutator)to argument
  void setAttack(int atk) { attack = atk; };  //set attack 
  void setLevel(int lvl) { level = lvl; };  //set level
  void setXP(int eXP) { xp = eXP; };     //set xp

  //default constructor
  Player() {
    name = String("P1");   //default: no name
    maxHealth = 10;
    health = 10;
    attack = 1;
    level = 1;
    xp = 0;
  }; 
};

  //CLASS POTION - heals PLAYER class when injured
class Potion {
  private:
  int restore;  //HP restore amount

  public:
  int getRestore() const { return restore; }  //accessor
  void setRestore(int newRestoreAmount) { restore = newRestoreAmount; };  //mutator
  void restoreHP (int, Player& p); //restore userHealth

  //default constructor
  Potion() { restore = 2; };     //1 HP
};

  //CLASS ENEMY - injures PLAYER class
class Enemy {
  private:
  String enemyID;   //enemy name
  int health, attack, xp; //health & attack
  
  public:
  String getID() { return enemyID; };   //accessors - enemy ID
  int getHealth() const { return health; };   //enemy Health
  int getAttack() const { return attack; };   //enemy attack
  int getXP() const { return xp; }; //enemy xp
  void setHealth(int hp) { health = hp; }; 
  void setAttack(int atk) { attack = atk; };

  //default constructor
  Enemy(String id, int enemyHealth, int enemyAttack, int eXP) {
    enemyID = id;
    health = enemyHealth;
    attack = enemyAttack;
    xp = eXP;
  };
};


  //FUNCTION PROTOTYPES
void pingSensor(int, int, long&, long&);   //ping sensor code
void Potion::restoreHP (int, Player&);      //potion
void EnemyEncounter(const Enemy[], Player&);  //enemy
void mainInterface();     //main scout
void standbyMessage(int);
void battleInterface(const Enemy[], int);   //battle sequence
void checkLevelUpDown(Player&, Enemy[]);    //check level up

/* /////////////////////////////////////////////////////////////////////////// */

//GLOBAL VARIABLES (PINS) DECLARATIONS AND INITIALIZATIONS
Servo enemyServo;    //servo object - Enemy's health
LiquidCrystal lcd(7, 6, 5, 4, 3, 2);  //lcd setup

const int LED_PIN = 12,
          RAND_PIN = 0,     //random generator pin     
          BUZZER_PIN = 8,   //buzzer/speaker pin
          ESERVO_PIN = 10, //enemy servo pin
          BUTTON_PIN = 13;


long duration, cm;  //ping measurements
long randPotion;    //randomPotion
long randEnemy;     //randomEnemy
int buttonState;   //attack button
int timer = 500;
            
  //GLOBAL OBJECTS
Player player; 
Potion potion;


  //ENEMIES ARRAY (TO BE ADDED TO)
Enemy enemy[] = { Enemy("Mimic", 10, 2, 5),    //health, attack, xp
                  Enemy("Wolf", 15, 3, 5),
                  Enemy("Slime", 15, 3, 5),
                  Enemy("Goblin", 25, 2, 5),
                  Enemy("Potato", 10, 2, 5), 
                  Enemy("Demon", 35, 3, 5),
                  Enemy("Wombat", 40, 2, 5),
                  Enemy("Wisp", 10, 4, 5),
                  Enemy("Drake", 70, 6, 5),
                  Enemy("Dryads", 50, 5, 5),
                  Enemy("Bear", 60, 8, 5),
                  Enemy("Jen E", 90, 10, 5), 
                  Enemy("DR.BOB", 55, 5, 5), 
                  Enemy("Devil", 66, 6, 5)
                };

//TONES
int fanfare[] = { 523, 523, 523, 523, 415,  //LOZ
                  466, 523, 466, 523}; 
int fanfareDur[] = {100, 100, 100, 350, 350,    //delay
                    350, 300, 150, 400}; 

int potionTheme[] = { 784, 740, 622, 440, 415,    //zelda theme
                  659, 831, 1047}; 


int healTheme[] = { 494, 494, 494, 415, 659 };  //pokecenter
int healDur[] = {320, 320, 200, 150, 400};

int alertTheme[] = { 494, 0,494, 0,494};       //alert theme
int alertDur[] = {200, 100, 200, 100, 200};

int defeatTheme[] = { 494, 698, 698, 698, 659,
                      587, 523, 330, 196, 330, 262};  //mario game over
int defeatDur[] = {100, 300, 100, 200, 200, 
                   100, 100, 150, 150, 100, 300};


//int circuitTheme[] = { 523, 523, 349, 523,     //circuit theme @ 130
                      //349, 349, 0, 349,
                      //392, 392, 262, 392,

int mainTheme[] = { 392, 494, 587, 740, 659, 0,   //main melody
                     740, 659, 0, 587, 494, 0, 587};
int mainDur[] = {200, 200, 200, 200, 200, 400, 
                     200, 200, 400, 200, 200, 250, 200};
int tempoControl;


void setup() {
    //PIN MODES
  pinMode(BUTTON_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
  
    //SERVO MODE
  enemyServo.attach(ESERVO_PIN);
    //RANDOM SEED - RANDOM GENERATOR
  randomSeed(analogRead(RAND_PIN));
 
  Serial.begin(9600);   //establish Serial connection
}
 
  //main - loops indefinitely
void loop() {
  enemyServo.write(0);     //refresh enemy Servo
  tempoControl = 0;     //reset theme

    //begin random searching
  mainInterface();
  for(tempoControl; tempoControl < 5; tempoControl++) {     //MUSIC
    tone(BUZZER_PIN, mainTheme[tempoControl], mainDur[tempoControl]),
    delay(mainDur[tempoControl] * 1.2);   
  }
  
  //RANDOM GENERATIONS
    //run thru potion drop
  randPotion = random(1, 21);   //1 - 20 3/21 = 19%
  Serial.println(randPotion);
  
    //potion encounter - first
  switch(randPotion) {
    case 1: case 4: case 13: case 20:
    lcd.print("POTION FOUND!");  //display message
      //at various parts of code, play part of main tune to "bypass" delay()
    for(int i = 0; i < 8; i++) {
      tone(BUZZER_PIN, potionTheme[i], 120);
      delay(120 * 1.2);
    }

    delay(1500);
    
    lcd.begin(16,2);
    lcd.print("POTION FOUND!");  //display message
    lcd.setCursor(0, 1);
    delay(1500);
    lcd.print(String("HP UP!: ") + String(player.getHealth()));
    potion.restoreHP(potion.getRestore(), player);    //if...delay(1500);
    for(int j = 0; j < 5; j++) {
      tone(BUZZER_PIN, healTheme[j], healDur[j]);
      delay(healDur[j] * 1.2);
    }
    lcd.print(String(" -> ") + String(player.getHealth()));

    delay(1500);
    //update
    mainInterface(); 
  }

  for(tempoControl = 5; tempoControl < 12; tempoControl++)
   {  
    tone(BUZZER_PIN, mainTheme[tempoControl], mainDur[tempoControl]);
    delay(mainDur[tempoControl] * 1.2);  
   };
  
  //run thru enemy encounters
  randEnemy = random(101);    //0 - 100  
  Serial.println(randEnemy);

    //random monster Encounters - random based on number found
  if(randEnemy < 18)      //18% 
    EnemyEncounter(enemy[random(6)], player);   //0-5
  else if(randEnemy > 33 && randEnemy <= 43)  //10% 
    EnemyEncounter(enemy[random(6, 9)], player); //6-8
  else if(randEnemy > 55 && randEnemy <= 60) //5%
    EnemyEncounter(enemy[random(9, 12)], player);
  else if (randEnemy == 75 || randEnemy == 100) //2%
    EnemyEncounter(enemy[random(12, 15)], player);
  else {
    standbyMessage(random(6));
  }

  tone(BUZZER_PIN, mainTheme[12], mainDur[12]);
  delay(1300);  //1.5 second delay in between events

}

/* //////////////////////////////////////////////////////////////////////////// */

void mainInterface() {        //display message prompt when on delay...
  lcd.begin(16, 2);
  lcd.print(String("SCOUTING...") + String("LV ") + String(player.getLevel()));   //searching prompt + level display
  lcd.setCursor(0, 1);
};


    //random messages
void standbyMessage(int message) {
  switch (message){
    case 1:
    lcd.print("NOTHING...");  
      break;
    case 2:
    lcd.print("TOO PEACEFUL...");
      break;
    case 3:
    lcd.print("SNORE...ZZZ...");
      break;
    case 4:
    lcd.print("SAFE AS CAN BE.");
      break;
    case 5:
    lcd.print("CLEAR.");
      break;
    default:
    lcd.print("AREA CLEAR!");
  }//end switch
};

void battleInterface(const Enemy e, int eHP) {
    lcd.begin(16, 2);     //wipe LCD/reset to row1
    lcd.print(String(player.getName()) + String("  ") + String(e.getID()));   //display user and monster name
    lcd.setCursor(0, 1);  //move to row 2
    lcd.print(String(player.getHealth()) + String("  ") + String(eHP));    //display user and monster health
  
};

// ---------------------------------------
  //potion class - restore userHP
void Potion::restoreHP (int healAmount, Player& p) {
    healAmount = healAmount + p.getLevel();   //check level heal  
    //temp. newHealth = player health + potion heal amount (e.g. 90 + 20 = 110)
    int newHealth = p.getHealth() + healAmount;
  
    //check for potential overheal
    if(newHealth >= p.getMaxHealth())    //(e.g. 110 > 100...)
      p.setHealth(p.getMaxHealth());
    //if so, restore to max health
    else      //else, just heal amount given
      p.setHealth(p.getHealth() + healAmount);    //90 + 10 = 100  

    delay(1500);
  };

// --------------------------------------
  //upon encountering an enemy...
void EnemyEncounter(const Enemy e, Player& p){    //unchanging value//points to enemy monster address
  int enemyHP = e.getHealth();      //temp variable - hold enemy hp
  lcd.setCursor(0, 1); //second row
  lcd.print(String("MET ") + String(e.getID()) + String(" !"));   //notify LCD
  
    //alert when encountering an enemy using buzzer
  for(int i = 0; i < 5; i++) {
    tone(BUZZER_PIN, alertTheme[i], alertDur[i]);
    delay(alertDur[i] * 1.2);
  }
  
  delay(1500); //1.5s

    //enter battle phase
  while(p.getHealth() > 0 && enemyHP > 0) {   //while health bars are above 0...
    battleInterface(e, enemyHP);  //set interface
    
    while(timer >= 0) { //timer
        //light when player's turn
      digitalWrite(LED_PIN, HIGH); 
      Serial.println(timer);
      buttonState = digitalRead(BUTTON_PIN);   
      if(buttonState == HIGH) {
         enemyHP -= p.getAttack();
         battleInterface(e, enemyHP);  //set interface
         delay(150);
      }//end if
     (enemyHP > 0) ? enemyServo.write(180/enemyHP) : enemyServo.write(180);      //write to servo

     timer--;
     } //end while

     digitalWrite(LED_PIN, LOW);   //player light off
     timer = 500;   //reset timer
    
    //if enemy defeat
    if(enemyHP <= 0) {
      lcd.begin(16, 2); 
      lcd.print("ENEMY DEFEAT!");   //display msg prompt
      
      for(int j = 0; j < 9; j++) {
        tone(BUZZER_PIN, fanfare[j], fanfareDur[j]);    //play fanfare victory song
        enemyServo.write(180/random(1, j + 1));
        delay(fanfareDur[j] * 1.2); 
      }
      
      lcd.setCursor(0, 1);
      lcd.print(String("XP GAINED: ") + String(e.getXP()));
      p.setXP(p.getXP() + (e.getXP() * p.getLevel()));      //gain xp 
      delay(1500);

      lcd.begin(16, 2);
      lcd.print(String("TOTAL XP: ") + String(p.getXP()));  //display total xp
      delay(1500);
      break;
    }
    
    delay(1500);    //wait 1s
    
      //enemy turn 
    battleInterface(e, enemyHP); 
    p.setHealth(p.getHealth() - e.getAttack());   //reduce player health based on enemy attack
    battleInterface(e, enemyHP);
    delay(1500);   

    //if your defeat...
    if(p.getHealth() <= 0) {     
      lcd.begin(16, 2);  
      lcd.print("YOUR DEFEAT!");    //display msg
      lcd.setCursor(0, 1);
      lcd.print(String("XP LOST: -") + String(e.getXP()));    //lose xp
      for(int i = 0; i < 11; i++) {
        tone(BUZZER_PIN, defeatTheme[i], defeatDur[i]);     //play defeat song
        delay(defeatDur[i] * 1.2);
      }
      delay(1500);

      //if player XP is > than enemy, deduct. else, set to 0.
      (p.getXP() > e.getXP()) ? p.setXP(player.getXP() - (e.getXP() * p.getLevel())) :      //lose xp
       p.setXP(0);
       lcd.begin(16, 2);
       lcd.print(String("TOTAL XP: ") + String(p.getXP()));
       delay(1500);
       

    }
  } //end while

    //restore health if hp 0 to half max health
    if(p.getHealth() <= 0)
      p.setHealth(p.getMaxHealth() / 2);

    checkLevelUpDown(player, enemy);  //check if level up or down
  
};

// -----------------------------------------------------------
void checkLevelUpDown(Player &p, Enemy e[]) {
  
  if(p.getXP() % 25 == 0 && p.getXP() != 0) {     //every 25 xp...
    
    lcd.begin(16, 2);
    lcd.print("LVL UP!");
    p.setXP(0);
    lcd.setCursor(0, 1);
    lcd.print(String("LV: ") + String(p.getLevel()) + String(" -> "));
    delay(1000);
    p.setLevel(p.getLevel() + 1);   //set new level
    lcd.print(p.getLevel());
    p.setHealth(p.getMaxHealth());    //reset health
    delay(1500);
    
  }

    //if xp is lost - downgrade to level 1
  if(p.getXP() <= 0 && p.getLevel() > 1) {
     p.setXP(0);
     lcd.begin(16,2);
     lcd.print("LEVEL RESET");
     p.setLevel(1);
     delay(1500);
  }

    //buff monsters
  if(p.getLevel() % 5 == 0 && p.getLevel() != 0) {
    for(int i = 0; i < 15; i++) {
      e[i].setHealth(e[i].getHealth() + p.getLevel());    //if in between, level up monsters hp
      e[i].setAttack(e[i].getAttack() + p.getLevel());    //& atk
    }

    lcd.begin(16, 2);
    lcd.print("ENEMIES GOT");
    lcd.setCursor(0, 1);
    lcd.print("STRONGER!");
    delay(1500);
  }
  
  delay(1500);
   
  
};
